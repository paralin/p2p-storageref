// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/storageref/storageref.proto

/*
Package storageref is a generated protocol buffer package.

It is generated from these files:
	github.com/aperturerobotics/storageref/storageref.proto

It has these top-level messages:
	StorageRef
	StorageRefIPFS
	StorageRefDigest
*/
package storageref

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// StorageType contains the possible types of storage.
type StorageType int32

const (
	// StorageType_UNKNOWN holds unknown values.
	StorageType_StorageType_UNKNOWN StorageType = 0
	// StorageType_IPFS is the IPFS storage type.
	StorageType_StorageType_IPFS StorageType = 1
	// StorageType_DIGEST references a digest in local storage only by object multihash.
	StorageType_StorageType_DIGEST StorageType = 2
)

var StorageType_name = map[int32]string{
	0: "StorageType_UNKNOWN",
	1: "StorageType_IPFS",
	2: "StorageType_DIGEST",
}
var StorageType_value = map[string]int32{
	"StorageType_UNKNOWN": 0,
	"StorageType_IPFS":    1,
	"StorageType_DIGEST":  2,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}
func (StorageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// IPFSRefType is an ipfs reference type.
type IPFSRefType int32

const (
	// IPFSRefType_BLOCK is the default reference type, an IPFS block.
	IPFSRefType_IPFSRefType_BLOCK IPFSRefType = 0
	// IPFSRefType_OBJECT indicates the hash refers to a IPFS merkle object.
	IPFSRefType_IPFSRefType_OBJECT IPFSRefType = 1
)

var IPFSRefType_name = map[int32]string{
	0: "IPFSRefType_BLOCK",
	1: "IPFSRefType_OBJECT",
}
var IPFSRefType_value = map[string]int32{
	"IPFSRefType_BLOCK":  0,
	"IPFSRefType_OBJECT": 1,
}

func (x IPFSRefType) String() string {
	return proto.EnumName(IPFSRefType_name, int32(x))
}
func (IPFSRefType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// StorageRef references storage.
type StorageRef struct {
	// StorageType contains the type of storage this references.
	StorageType StorageType `protobuf:"varint,1,opt,name=storage_type,json=storageType,enum=storageref.StorageType" json:"storage_type,omitempty"`
	// ObjectDigest contains the digest of the decrypted object.
	// Optional.
	ObjectDigest []byte `protobuf:"bytes,3,opt,name=object_digest,json=objectDigest,proto3" json:"object_digest,omitempty"`
	// Ipfs contains a IPFS storage reference.
	Ipfs *StorageRefIPFS `protobuf:"bytes,2,opt,name=ipfs" json:"ipfs,omitempty"`
	// Digest contains a digest-only reference (empty at the moment).
	Digest *StorageRefDigest `protobuf:"bytes,4,opt,name=digest" json:"digest,omitempty"`
}

func (m *StorageRef) Reset()                    { *m = StorageRef{} }
func (m *StorageRef) String() string            { return proto.CompactTextString(m) }
func (*StorageRef) ProtoMessage()               {}
func (*StorageRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StorageRef) GetStorageType() StorageType {
	if m != nil {
		return m.StorageType
	}
	return StorageType_StorageType_UNKNOWN
}

func (m *StorageRef) GetObjectDigest() []byte {
	if m != nil {
		return m.ObjectDigest
	}
	return nil
}

func (m *StorageRef) GetIpfs() *StorageRefIPFS {
	if m != nil {
		return m.Ipfs
	}
	return nil
}

func (m *StorageRef) GetDigest() *StorageRefDigest {
	if m != nil {
		return m.Digest
	}
	return nil
}

// StorageRefIPFS references an object in IPFS.
type StorageRefIPFS struct {
	// Reference contains the referenced multihash in string form.
	Reference string `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
	// IpfsRefType indicates the type of IPFS reference type this is.
	IpfsRefType IPFSRefType `protobuf:"varint,2,opt,name=ipfs_ref_type,json=ipfsRefType,enum=storageref.IPFSRefType" json:"ipfs_ref_type,omitempty"`
}

func (m *StorageRefIPFS) Reset()                    { *m = StorageRefIPFS{} }
func (m *StorageRefIPFS) String() string            { return proto.CompactTextString(m) }
func (*StorageRefIPFS) ProtoMessage()               {}
func (*StorageRefIPFS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StorageRefIPFS) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *StorageRefIPFS) GetIpfsRefType() IPFSRefType {
	if m != nil {
		return m.IpfsRefType
	}
	return IPFSRefType_IPFSRefType_BLOCK
}

// StorageRefDigest references an object by digest only.
type StorageRefDigest struct {
}

func (m *StorageRefDigest) Reset()                    { *m = StorageRefDigest{} }
func (m *StorageRefDigest) String() string            { return proto.CompactTextString(m) }
func (*StorageRefDigest) ProtoMessage()               {}
func (*StorageRefDigest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*StorageRef)(nil), "storageref.StorageRef")
	proto.RegisterType((*StorageRefIPFS)(nil), "storageref.StorageRefIPFS")
	proto.RegisterType((*StorageRefDigest)(nil), "storageref.StorageRefDigest")
	proto.RegisterEnum("storageref.StorageType", StorageType_name, StorageType_value)
	proto.RegisterEnum("storageref.IPFSRefType", IPFSRefType_name, IPFSRefType_value)
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/storageref/storageref.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4b, 0x4f, 0xf2, 0x40,
	0x14, 0x65, 0xf8, 0x08, 0x09, 0xb7, 0x40, 0xfa, 0x5d, 0x1f, 0x10, 0xc3, 0x82, 0xe0, 0x86, 0xb0,
	0x28, 0x09, 0x9a, 0x98, 0xa8, 0x2b, 0x1e, 0x1a, 0xc4, 0x80, 0x19, 0x6a, 0x5c, 0x36, 0xb4, 0xde,
	0xc1, 0x6a, 0x74, 0x9a, 0xe9, 0xb0, 0xe0, 0x77, 0xfa, 0x87, 0x4c, 0x1f, 0x91, 0x51, 0xd9, 0xf5,
	0x9c, 0x7b, 0xce, 0xb9, 0xf7, 0x74, 0xe0, 0x62, 0x1d, 0xea, 0x97, 0x8d, 0xef, 0x04, 0xf2, 0xbd,
	0xbf, 0x8a, 0x48, 0xe9, 0x8d, 0x22, 0x25, 0x7d, 0xa9, 0xc3, 0x20, 0xee, 0xc7, 0x5a, 0xaa, 0xd5,
	0x9a, 0x14, 0x09, 0xe3, 0xd3, 0x89, 0x94, 0xd4, 0x12, 0x61, 0xc7, 0x74, 0x3e, 0x19, 0xc0, 0x32,
	0x83, 0x9c, 0x04, 0x5e, 0x42, 0x35, 0x1f, 0x7a, 0x7a, 0x1b, 0x51, 0x93, 0xb5, 0x59, 0xb7, 0x3e,
	0x68, 0x38, 0x46, 0x46, 0xae, 0x76, 0xb7, 0x11, 0x71, 0x2b, 0xde, 0x01, 0x3c, 0x85, 0x9a, 0xf4,
	0x5f, 0x29, 0xd0, 0xde, 0x73, 0xb8, 0xa6, 0x58, 0x37, 0xff, 0xb5, 0x59, 0xb7, 0xca, 0xab, 0x19,
	0x39, 0x4e, 0x39, 0x74, 0xa0, 0x14, 0x46, 0x22, 0x6e, 0x16, 0xdb, 0xac, 0x6b, 0x0d, 0x4e, 0xf6,
	0x04, 0x73, 0x12, 0xd3, 0x87, 0x9b, 0x25, 0x4f, 0x75, 0x78, 0x0e, 0xe5, 0x3c, 0xad, 0x94, 0x3a,
	0x5a, 0xfb, 0x1d, 0x59, 0x3a, 0xcf, 0xb5, 0x9d, 0x37, 0xa8, 0xff, 0x4c, 0xc3, 0x16, 0x54, 0x14,
	0x09, 0x52, 0xf4, 0x11, 0x64, 0xad, 0x2a, 0x7c, 0x47, 0xe0, 0x15, 0xd4, 0x92, 0x6d, 0x9e, 0x22,
	0x91, 0xf5, 0x2e, 0xfe, 0xed, 0x9d, 0x1e, 0x45, 0x22, 0xeb, 0x9d, 0xa8, 0x73, 0xd0, 0x41, 0xb0,
	0x7f, 0x1f, 0xd2, 0x73, 0xc1, 0x32, 0xfe, 0x13, 0x36, 0xe0, 0xc0, 0x80, 0xde, 0xe3, 0x7c, 0x36,
	0x5f, 0x3c, 0xcd, 0xed, 0x02, 0x1e, 0x7e, 0x7b, 0xd3, 0x41, 0xb2, 0xc3, 0x66, 0x78, 0x0c, 0x68,
	0xb2, 0xe3, 0xe9, 0xed, 0x64, 0xe9, 0xda, 0xc5, 0xde, 0x35, 0x58, 0xc6, 0x15, 0x78, 0x04, 0xff,
	0x0d, 0xe8, 0x0d, 0xef, 0x17, 0xa3, 0x99, 0x5d, 0x48, 0xdc, 0x26, 0xbd, 0x18, 0xde, 0x4d, 0x46,
	0xae, 0xcd, 0xfc, 0x72, 0xfa, 0xfa, 0x67, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x95, 0x78,
	0x0c, 0x38, 0x02, 0x00, 0x00,
}
